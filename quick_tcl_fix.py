#!/usr/bin/env python3
"""
Quick Tcl/Tk Fix for Python 3.13
"""

import os
import sys
import shutil
from pathlib import Path

def main():
    print("Quick Tcl/Tk Fix for Python 3.13")
    print("=" * 40)
    
    # Get Python installation directory
    python_exe = Path(sys.executable)
    python_dir = python_exe.parent
    print(f"Python directory: {python_dir}")
    
    # Create tcl directory structure
    tcl_dir = python_dir / "tcl"
    tcl86_dir = tcl_dir / "tcl8.6"
    tk86_dir = tcl_dir / "tk8.6"
    
    print(f"Creating Tcl directories...")
    tcl86_dir.mkdir(parents=True, exist_ok=True)
    tk86_dir.mkdir(parents=True, exist_ok=True)
    
    # Try to find existing Tcl/Tk installation
    possible_sources = [
        Path("C:/tcl"),
        Path("C:/Program Files/Tcl"),
        Path("C:/Program Files (x86)/Tcl"),
        Path("C:/Python313/tcl"),  # If it exists
    ]
    
    print("Searching for Tcl/Tk files...")
    found = False
    
    for source in possible_sources:
        if source.exists():
            print(f"Found potential source: {source}")
            
            # Look for tcl8.6 and tk8.6 directories
            tcl86_source = source / "tcl8.6"
            tk86_source = source / "tk8.6"
            
            if tcl86_source.exists():
                print(f"Copying {tcl86_source} to {tcl86_dir}")
                try:
                    if tcl86_dir.exists():
                        shutil.rmtree(tcl86_dir)
                    shutil.copytree(tcl86_source, tcl86_dir)
                    found = True
                except Exception as e:
                    print(f"Error copying tcl8.6: {e}")
            
            if tk86_source.exists():
                print(f"Copying {tk86_source} to {tk86_dir}")
                try:
                    if tk86_dir.exists():
                        shutil.rmtree(tk86_dir)
                    shutil.copytree(tk86_source, tk86_dir)
                    found = True
                except Exception as e:
                    print(f"Error copying tk8.6: {e}")
    
    if not found:
        print("\nNo existing Tcl/Tk installation found.")
        print("Creating minimal Tcl/Tk structure...")
        
        # Create minimal init.tcl file
        init_tcl_content = '''# Tcl package index file, version 1.1
# This file is generated by the "pkg_mkIndex" command
# and sourced either when an application starts up or
# by a "package unknown" script.  It invokes the
# "package ifneeded" command to set up package-related
# information so that packages will be loaded automatically
# in response to "package require" commands.  When this
# script is sourced, the variable $dir must contain the
# full path name of this file's directory.

package ifneeded Tcl 8.6 [list load [file join $dir tcl86t.dll] Tcl]
package ifneeded Tk 8.6 [list load [file join $dir tk86t.dll] Tk]
'''
        
        # Create the init.tcl file
        init_tcl_path = tcl86_dir / "init.tcl"
        with open(init_tcl_path, 'w') as f:
            f.write(init_tcl_content)
        
        print(f"Created minimal init.tcl at {init_tcl_path}")
    
    # Set environment variables
    os.environ['TCL_LIBRARY'] = str(tcl86_dir)
    os.environ['TK_LIBRARY'] = str(tk86_dir)
    
    print(f"\nSet environment variables:")
    print(f"TCL_LIBRARY = {tcl86_dir}")
    print(f"TK_LIBRARY = {tk86_dir}")
    
    # Test tkinter
    print("\nTesting tkinter...")
    try:
        import tkinter
        root = tkinter.Tk()
        root.destroy()
        print("✅ SUCCESS: Tkinter is working!")
        print("\nYou can now run: py main.py")
    except Exception as e:
        print(f"❌ Tkinter test failed: {e}")
        print("\nFor now, use the portable executable: run_app.bat")

if __name__ == "__main__":
    main() 